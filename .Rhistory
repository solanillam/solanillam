df_cleaned <- df %>%
select(-which(colSums(is.na(df)) > 0))
# Remove columns with any NA values
df_cleaned <- df
select(-which(colSums(is.na(df)) > 0))
# Step 1: Load Data and Clean (Munge) Data
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove columns with any NA values
df_cleaned <- df
select(-which(colSums(is.na(df)) > 0))
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Check the cleaned data
head(df_cleaned)
View(df_cleaned)
# Ensure all numeric columns are properly formatted (e.g., people, hours, overtime, etc.)
df_cleaned <- df_cleaned %>%
mutate(across(c(ppl, hrs, ovt, aud, obs, inc), as.numeric))
# Check the structure of the cleaned data
str(df_cleaned)
# Handle negative or impossible values for hours or overtime (if any)
df_cleaned <- df_cleaned %>%
mutate(hrs = ifelse(hrs < 0, NA, hrs),
ovt = ifelse(ovt < 0, NA, ovt))
# Create additional useful columns, e.g., total work time (hrs + ovt)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Remove rows where 'hrs' or 'total_work_time' are NA (if necessary)
df_cleaned <- df_cleaned %>%
filter(!is.na(hrs) & !is.na(total_work_time))
# Handle negative or impossible values for hours or overtime (if any)
df_cleaned <- df_cleaned %>%
mutate(hrs = ifelse(hrs < 0, NA, hrs),
ovt = ifelse(ovt < 0, NA, ovt))
# Create additional useful columns, e.g., total work time (hrs + ovt)
df_cleaned2 <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Remove rows where 'hrs' or 'total_work_time' are NA (if necessary)
df_cleaned2 <- df_cleaned2 %>%
filter(!is.na(hrs) & !is.na(total_work_time))
# Summary of the cleaned data
summary(df_cleaned2)
# Check the structure of the cleaned data
str(df_cleaned2)
ggplot(df_cleaned, aes(x = date, y = hrs)) +
geom_line() +
labs(title = "Trend of Hours Worked Over Time",
x = "Date",
y = "Hours Worked") +
theme_minimal()
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point() +
labs(title = "Overtime vs. Hours Worked",
x = "Hours Worked",
y = "Overtime") +
theme_minimal()
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity") +
labs(title = "Incidents Across Units",
x = "Unit",
y = "Incidents") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
Load necessary libraries
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove columns with any NA values
df_cleaned <- df %>%
select(-which(colSums(is.na(df)) > 0))
# Remove rows where the 'unit' column is missing or empty
df_cleaned <- df %>%
filter(!is.na(unit) & unit != "")
# Check the cleaned data
head(df_cleaned)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove columns with any NA values
df_cleaned <- df %>%
select(-which(colSums(is.na(df)) > 0))
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove rows where the 'unit' column is missing or empty
df_cleaned <- df %>%
filter(!is.na(unit) & unit != "")
df_cleaned <- df %>%
filter(!is.na(unit) & unit != "" & unit != " ")
View(df_cleaned)
df_cleaned <- df_cleaned %>%
select(-c(aud, obs, turnaround))
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove rows where the 'unit' column is missing or empty
df_cleaned <- df_cleaned %>%
select(-c(aud, obs, turnaround))
# Remove rows where the 'unit' column is missing or empty
df %>%
select(-c(aud, obs, turnaround))
View(df)
View(df)
df %>%
select(-c(aud, obs, turnaround,inc))
# Remove rows where the 'unit' column is missing or empty
df %>%
select(-aud, -obs, -turnaround)
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove rows where the 'unit' column is missing or empty
df %>%
select(-aud, -obs, -turnaround)
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Check the structure of the dataset to confirm it's loaded correctly
str(df)
# Remove rows where the 'unit' column is missing or empty
df %>%
select(-`aud`, -`obs`, -`turnaround`)
df %>%
select(- "aud", -"obs", -"turnaround"
str(df)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', 'inc', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -inc, -turnaround)
# Check the cleaned data
head(df_cleaned)
View(df_cleaned)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
View(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)
View(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)
filter(!is.na(ovt))
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
View(df_cleaned)
# Step 5: Standardize date formats (convert all dates to 'Date' type)
df_cleaned$date <- mdy(df_cleaned$date)  # Use lubridate to handle different date formats
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
View(df_cleaned)
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
theme_minimal()
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
theme_minimal()
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Incidents over time
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Correlation plot
library(ggcorrplot)
library(ggcorrplot)
# Install corrplot if you don't have it yet
install.packages("corrplot")
# Load necessary libraries
library(corrplot)
correlation_matrix <- cor(df_cleaned %>% select(hrs, ovt, total_work_time), use = "complete.obs")
ggcorrplot(correlation_matrix, hc.order = TRUE, type = "lower", lab = TRUE)
# Calculate correlation matrix
correlation_matrix <- cor(df_cleaned %>% select(hrs, ovt, total_work_time), use = "complete.obs")
# Create a correlation plot
corrplot(correlation_matrix, method = "circle", type = "lower", addCoef.col = "black", number.cex = 0.7)
# Add a new column for day of the week
df_cleaned <- df_cleaned %>%
mutate(day_of_week = weekdays(date))
# Average work time by day of the week
df_day_of_week <- df_cleaned %>%
group_by(day_of_week) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
# Plot average work time by day of the week
ggplot(df_day_of_week, aes(x = reorder(day_of_week, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Average Total Work Time by Day of the Week", x = "Day of the Week", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Add a new column for day of the week
df_cleaned <- df_cleaned %>%
mutate(day_of_week = weekdays(date))
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Load necessary libraries
library(tidyverse)
library(lubridate)
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
library(readxl, lib.loc = "/usr/lib64/R/library")
library(tidyverse, lib.loc = "/usr/lib64/R/library")
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(stringr)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(stringr)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)
)
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.8, size = 8)
)
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 0.5, size = 8)
)
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 0.3, size = 8)
)
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 0.8, size = 8)
)
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 0.12, size = 8)
)
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
+
theme_minimal()
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Install corrplot if you don't have it yet
install.packages("corrplot")
# Load necessary libraries
library(corrplot)
# Calculate correlation matrix
correlation_matrix <- cor(df_cleaned %>% select(hrs, ovt, total_work_time), use = "complete.obs")
# Create a correlation plot
corrplot(correlation_matrix, method = "circle", type = "lower", addCoef.col = "black", number.cex = 0.7)
# Add a new column for day of the week
df_cleaned <- df_cleaned %>%
mutate(day_of_week = weekdays(date))
# Average work time by day of the week
df_day_of_week <- df_cleaned %>%
group_by(day_of_week) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
# Plot average work time by day of the week
ggplot(df_day_of_week, aes(x = reorder(day_of_week, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Average Total Work Time by Day of the Week", x = "Day of the Week", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
