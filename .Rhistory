# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
+
theme_minimal()
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Install corrplot if you don't have it yet
install.packages("corrplot")
# Load necessary libraries
library(corrplot)
# Calculate correlation matrix
correlation_matrix <- cor(df_cleaned %>% select(hrs, ovt, total_work_time), use = "complete.obs")
# Create a correlation plot
corrplot(correlation_matrix, method = "circle", type = "lower", addCoef.col = "black", number.cex = 0.7)
# Add a new column for day of the week
df_cleaned <- df_cleaned %>%
mutate(day_of_week = weekdays(date))
# Average work time by day of the week
df_day_of_week <- df_cleaned %>%
group_by(day_of_week) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
# Plot average work time by day of the week
ggplot(df_day_of_week, aes(x = reorder(day_of_week, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Average Total Work Time by Day of the Week", x = "Day of the Week", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx",
header = TRUE,
stringsAsFactors = FALSE)
#| label: "needed"
# For data manipulation and tidying
library(dplyr)
library(lubridate)
library(tidyr)
# For data visualizations
library(ggplot2)
# For modeling and machine learning
library(caret)
#| label: "needed"
# For data manipulation and tidying
library(tidyverse)
library(stringr)
# For date and time handling
library(lubridate)
# For data importing
library(readxl)
#| label: "needed"
# For data manipulation and tidying
library(tidyverse)
library(stringr)
# For date and time handling
library(lubridate)
# For data importing
library(readxl)
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx",
header = TRUE,
stringsAsFactors = FALSE)
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx",
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
## Mariana Solanilla
## The purpose behind this R script is to perform data munging (cleaning and transforming the dataset),
## followed by data exploration, visualization, and aggregation to extract valuable insights.
#------------------------------------------------------
# Step 1: Load Data and Clean (Munge) Data
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(stringr)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
+
theme_minimal()
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(stringr)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
+
theme_minimal()
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)+
theme_minimal()
## Mariana Solanilla
## The purpose behind this R script is to perform data munging (cleaning and transforming the dataset),
## followed by data exploration, visualization, and aggregation to extract valuable insights.
#------------------------------------------------------
# Step 1: Load Data and Clean (Munge) Data
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(stringr)
# Load the dataset from the specified path
df <- read_excel("~/git_repos/solanillam/Project_2/Raw_Data/Copy of df_overall_final_V1.xlsx")
# Remove 'aud', 'obs', and 'turnaround' columns from the dataset
df_cleaned <- df %>%
select(-aud, -obs, -turnaround)
# Check the cleaned data
head(df_cleaned)
# Keep only rows where 'inc' is not 0 or NA
df_cleaned <- df_cleaned %>%
filter(!is.na(inc) & inc != 0)%>%
filter(!is.na(ovt))
# Step 6: Check for duplicates
df_cleaned <- df_cleaned %>%
distinct()  # Remove duplicate rows
# Step 7: Handle outliers (e.g., overtime should not be negative or unrealistically large)
df_cleaned <- df_cleaned %>%
filter(ovt >= 0 & ovt <= 24)  # Filter out rows where overtime is negative or larger than a reasonable limit (e.g., 24 hours)
# Step 8: Standardize text data (remove extra spaces and convert text to consistent format)
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))  # Remove spaces and convert all unit names to uppercase
# Step 9: Create new columns (e.g., total work time)
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
# Check the cleaned data
head(df_cleaned)
# Time-Based Trend: Total Work Time Over Time
# Plot total work time over time
ggplot(df_cleaned, aes(x = date, y = total_work_time)) +
geom_line(color = "blue") +
labs(title = "Total Work Time Over Time", x = "Date", y = "Total Work Time (hrs)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Incident Distribution Across Units
# Bar plot of incidents across units
ggplot(df_cleaned, aes(x = unit, y = inc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Incidents Across Units", x = "Unit", y = "Number of Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
# Overtime vs. Hours Worked
# Scatter plot: Overtime vs. Hours Worked
ggplot(df_cleaned, aes(x = hrs, y = ovt)) +
geom_point(color = "green", alpha = 0.6) +
labs(title = "Overtime vs. Hours Worked", x = "Hours Worked", y = "Overtime (hrs)") +
theme_minimal()
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)+
theme_minimal()
# Incidents over time
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8)
)
usethis::create_github_token()
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
gitcreds::gitcreds_set()
![Workforce and Safety!](https://files.oaiusercontent.com/file-Xiw2QHwmdbpJsY3M2yn8JM?se=2024-12-10T19%3A39%3A04Z&sp=r&sv=2024-08-04&sr=b&rscc=max-age%3D604800%2C%20immutable%2C%20private&rscd=attachment%3B%20filename%3D7b4dfcf7-5375-4467-a6df-58c2d1676ed8.webp&sig=rD88H0clo2XVqY1GGvwBaTuMWxi%2B2MeJs4vuM4yq86Q%3D)
[Workforce and Safety](https://files.oaiusercontent.com/file-Xiw2QHwmdbpJsY3M2yn8JM?se=2024-12-10T19%3A39%3A04Z&sp=r&sv=2024-08-04&sr=b&rscc=max-age%3D604800%2C%20immutable%2C%20private&rscd=attachment%3B%20filename%3D7b4dfcf7-5375-4467-a6df-58c2d1676ed8.webp&sig=rD88H0clo2XVqY1GGvwBaTuMWxi%2B2MeJs4vuM4yq86Q%3D)
https://github.com/solanillam/solanillam/security/secret-scanning/unblock-secret/2q3DJOJCCZdgKSOozgCVRn6K2KY
https://github.com/solanillam/solanillam/security/secret-scanning/unblock-secret/2q3DJOJCCZdgKSOozgCVRn6K2KY
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
#| label: "setup"
#| include: false
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, comment = NA, fig.align = "center")
#| label: "needed"
# For data importing
library(readxl)
# For data manipulation and tidying
library(tidyverse)
library(stringr)
# For date and time handling
library(lubridate)
# Removed Unnecessary Columns
df_cleaned <- df %>% select(-aud, -obs, -turnaround)
# Removed Duplicate Rows
df_cleaned <- df_cleaned %>% distinct()
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
# Standardized Text Data
df_cleaned$unit <- trimws(toupper(df_cleaned$unit))
# Created New Variables
df_cleaned <- df_cleaned %>%
mutate(total_work_time = hrs + ovt)
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
#| label: fig-nbs
#| fig-cap: "Line graph showing fluctuations in the number of incidents over time, with the highest spike occurring in early 2024."
#| echo: false
# Incidents over time
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
#| label: "needed"
# For data importing
library(readxl)
# For data manipulation and tidying
library(tidyverse)
library(stringr)
library(dplyr)
# For date and time handling
library(lubridate)
# For creating visuals
library(ggplot2)
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
df_incidents_over_time <- df_cleaned %>%
group_by(date) %>%
summarize(total_incidents = sum(inc, na.rm = TRUE))
ggplot(df_incidents_over_time, aes(x = date, y = total_incidents)) +
geom_line(color = "red") +
labs(title = "Incidents Over Time", x = "Date", y = "Total Incidents") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1.0, size = 8),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
> usethis::create_github_token()
usethis::create_github_token()
gitcreds::gitcreds_set()
#| label: "needed"
# For data importing
library(readxl)
# For data manipulation and tidying
library(tidyverse)
library(stringr)
library(dplyr)
# For date and time handling
library(lubridate)
# For creating visuals
library(ggplot2)
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1, size = 8), # Ensures angled text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
#| label: "needed"
# For data importing
library(readxl)
# For data manipulation and tidying
library(tidyverse)
library(stringr)
library(dplyr)
# For date and time handling
library(lubridate)
# Quarto rendering
library(rmarkdown)
library(knitr)
# For creating visuals
library(ggplot2)
#| label: fig-nbs3
#| fig-cap: "Bar graph showing average total work time across units, with the highest averages recorded in GBR-OMCC-FIELD and GBR-CHEMICALS units."
#| echo: false
# Average total work time by unit
df_avg_work_time <- df_cleaned %>%
group_by(unit) %>%
summarize(avg_work_time = mean(total_work_time, na.rm = TRUE))
ggplot(df_avg_work_time, aes(x = reorder(unit, avg_work_time), y = avg_work_time)) +
geom_bar(stat = "identity", fill = "coral") +
labs(title = "Average Total Work Time by Unit", x = "Unit", y = "Average Work Time (hrs)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 55, hjust = 1, vjust = 1, size = 8), # Ensures angled text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
